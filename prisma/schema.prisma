generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
  extensions      = [vector(schema: "public")]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String
  provider          String
  providerAccountId String   @map("provider_account_id")
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                   String    @id @default(cuid())
  address              String?
  badges               Json?
  banned               Boolean?
  bio                  String?   @db.Text // User's bio or description
  birthday             DateTime?
  blog                 String?
  city                 String?
  company              String?
  contributorsEnabled  Boolean?
  countryCode          String?
  createdAt            DateTime  @default(now())
  createdAtTwitter     DateTime?
  deletedAt            DateTime?
  email                String?   @unique
  emailVerified        DateTime?
  favouritesCount      Int?
  firstName            String?
  followersCount       Int? // Number of followers
  followingCount       Int? // Number of accounts the user is following
  gdprConsent          Boolean   @default(false)
  gender               String?
  geoEnabled           Boolean?
  githubUsername       String?
  hireable             Boolean?
  image                String?
  ipAddress            String?   @db.VarChar(45)
  language             String?
  lastName             String?
  lastSignInAt         BigInt?
  likeCount            Int? // Number of likes
  listedCount          Int?
  location             String? // User's location as per their Twitter profile
  name                 String?
  newsletterSubscribed Boolean   @default(false)
  phoneNumber          String?
  points               Int?
  postalCode           String?
  privateMetadata      Json?
  profileBannerUrl     String?
  protected            Boolean?
  publicMetadata       Json?
  referrerUserId       String?
  signatureTimestamp   DateTime  @default(now())
  signedPetition       Boolean   @default(false)
  stateProvince        String?
  statusesCount        Int?
  timeZone             String?
  tweetCount           Int? // Number of tweets (including retweets)
  twitterHandle        String? // Twitter username/handle
  type                 String?
  unsafeMetadata       Json?
  updatedAt            DateTime  @updatedAt
  username             String    @unique @default(uuid())
  verified             Boolean?
  warPercentageDesired Float?
  warPercentageGuessed Float?
  web3Wallet           String?
  website              String?

  accounts                        Account[]
  sessions                        Session[]
  activities                      Activity[]
  wishingWells                    WishingWell[]
  educations                      Education[]
  positions                       Position[]
  skills                          Skill[]
  endorsements                    Endorsement[]
  userRecommendations             Recommendation[]              @relation("UserRecommendations")
  recommenderRecommendations      Recommendation[]              @relation("RecommenderRecommendations")
  posts                           Post[]
  likes                           Like[]
  comments                        Comment[]
  initiatedFriendships            Friendship[]                  @relation(name: "InitiatorFriendships")
  receivedFriendships             Friendship[]                  @relation(name: "ReceiverFriendships")
  createdGenieDAOs                GenieDAO[]                    @relation("CreatedGenieDAOs")
  joinedGenieDAOs                 GenieDAO[]                    @relation("JoinedGenieDAOs")
  createdWishFulfillmentProposals WishFulfillmentProposal[]     @relation("CreatedProposals")
  createdProposalProgressReports  ProposalProgressReport[]
  proposalComparisons             ProposalComparison[]
  wishingWellPairAllocations      WishingWellPairAllocation[]
  globalProblemPairAllocations    GlobalProblemPairAllocation[]
  globalProblems                  GlobalProblem[]
  genieDAOFeedback                GenieDAOFeedback[]
  Agents                          Agent[]
  UserApiKeys                     UserApiKey[]
}

model Education {
  id           String    @id @default(cuid())
  user         User      @relation(fields: [userId], references: [id])
  userId       String
  school       String
  degree       String?
  fieldOfStudy String?
  startDate    DateTime
  endDate      DateTime?
}

model Position {
  id        String    @id @default(cuid())
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  title     String
  company   String
  startDate DateTime
  endDate   DateTime?
  isCurrent Boolean
}

model Skill {
  id           String        @id @default(cuid())
  user         User          @relation(fields: [userId], references: [id])
  userId       String
  name         String
  endorsements Endorsement[]
}

model Endorsement {
  id      String @id @default(cuid())
  skill   Skill  @relation(fields: [skillId], references: [id])
  skillId String
  user    User   @relation(fields: [userId], references: [id])
  userId  String
}

model Recommendation {
  id            String @id @default(cuid())
  user          User   @relation(name: "UserRecommendations", fields: [userId], references: [id])
  userId        String
  recommenderId String
  recommender   User   @relation(name: "RecommenderRecommendations", fields: [recommenderId], references: [id])
  text          String
}

model Post {
  id        String    @id @default(cuid())
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  likes     Like[]
  comments  Comment[]
}

model Like {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  post   Post   @relation(fields: [postId], references: [id])
  postId String
}

model Comment {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Friendship {
  id        String   @id @default(cuid())
  user      User     @relation(name: "InitiatorFriendships", fields: [userId], references: [id])
  userId    String
  friendId  String
  friend    User     @relation(name: "ReceiverFriendships", fields: [friendId], references: [id])
  status    String   @default("pending")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Activity {
  id           String        @id @default(cuid())
  userId       String
  name         String
  description  String?
  colorCode    String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  user         User          @relation(fields: [userId], references: [id])
  activityLogs ActivityLog[]
}

model ActivityLog {
  id         String   @id @default(cuid())
  activityId String
  date       DateTime @default(now())
  count      Int      @default(1)
  activity   Activity @relation(fields: [activityId], references: [id])
}

model GlobalProblem {
  id                           String                        @id @default(cuid())
  userId                       String
  name                         String                        @unique
  description                  String?
  content                      String?
  featuredImage                String?
  createdAt                    DateTime                      @default(now())
  updatedAt                    DateTime                      @updatedAt
  user                         User                          @relation(fields: [userId], references: [id])
  thisGlobalProblemAllocations GlobalProblemPairAllocation[] @relation("ThisGlobalProblemRelation")
  thatGlobalProblemAllocations GlobalProblemPairAllocation[] @relation("ThatGlobalProblemRelation")
  averageAllocation            Float?
}

model GlobalProblemPairAllocation {
  id                          String        @id @default(cuid())
  userId                      String
  thisGlobalProblemId         String
  thatGlobalProblemId         String
  thisGlobalProblemPercentage Float
  createdAt                   DateTime      @default(now())
  updatedAt                   DateTime      @updatedAt
  user                        User          @relation(fields: [userId], references: [id])
  thisGlobalProblem           GlobalProblem @relation("ThisGlobalProblemRelation", fields: [thisGlobalProblemId], references: [id])
  thatGlobalProblem           GlobalProblem @relation("ThatGlobalProblemRelation", fields: [thatGlobalProblemId], references: [id])
}

model WishingWell {
  id                         String                      @id @default(cuid())
  userId                     String
  name                       String                      @unique
  description                String?
  content                    String?
  images                     String[]
  featuredImage              String?
  createdAt                  DateTime                    @default(now())
  updatedAt                  DateTime                    @updatedAt
  user                       User                        @relation(fields: [userId], references: [id])
  wishingWellContributions   WishingWellContribution[]
  proposals                  WishFulfillmentProposal[]
  thisWishingWellAllocations WishingWellPairAllocation[] @relation("ThisWishingWellRelation")
  thatWishingWellAllocations WishingWellPairAllocation[] @relation("ThatWishingWellRelation")
  averageAllocation          Float?
}

model WishingWellPairAllocation {
  id                        String      @id @default(cuid())
  userId                    String
  thisWishingWellId         String
  thatWishingWellId         String
  thisWishingWellPercentage Float
  createdAt                 DateTime    @default(now())
  updatedAt                 DateTime    @updatedAt
  user                      User        @relation(fields: [userId], references: [id])
  thisWishingWell           WishingWell @relation("ThisWishingWellRelation", fields: [thisWishingWellId], references: [id])
  thatWishingWell           WishingWell @relation("ThatWishingWellRelation", fields: [thatWishingWellId], references: [id])
}

model WishingWellContribution {
  id            String      @id @default(cuid())
  wishingWellId String
  date          DateTime    @default(now())
  count         Int         @default(1)
  wishingWell   WishingWell @relation(fields: [wishingWellId], references: [id])
}

model GenieDAO {
  id             String                    @id @default(cuid())
  name           String
  reputation     Float                     @default(0)
  createdAt      DateTime                  @default(now())
  updatedAt      DateTime                  @updatedAt
  creator        User                      @relation("CreatedGenieDAOs", fields: [creatorId], references: [id])
  creatorId      String
  members        User[]                    @relation("JoinedGenieDAOs")
  proposals      WishFulfillmentProposal[]
  collaborations WishFulfillmentProposal[] @relation("ProposalCollaborators")
  feedback       GenieDAOFeedback[]
}

model WishFulfillmentProposal {
  id            String                   @id @default(cuid())
  wishingWellId String
  genieDAOId    String
  description   String
  leadIndicator String
  lagIndicator  String
  wishTokens    Int
  createdAt     DateTime                 @default(now())
  updatedAt     DateTime                 @updatedAt
  wishingWell   WishingWell              @relation(fields: [wishingWellId], references: [id])
  genieDAO      GenieDAO                 @relation(fields: [genieDAOId], references: [id])
  collaborators GenieDAO[]               @relation("ProposalCollaborators")
  reports       ProposalProgressReport[]
  creator       User                     @relation("CreatedProposals", fields: [creatorId], references: [id])
  creatorId     String
}

model ProposalProgressReport {
  id         String                  @id @default(cuid())
  proposalId String
  content    String
  createdAt  DateTime                @default(now())
  updatedAt  DateTime                @updatedAt
  proposal   WishFulfillmentProposal @relation(fields: [proposalId], references: [id])
  creator    User                    @relation(fields: [creatorId], references: [id])
  creatorId  String
}

model ProposalComparison {
  id                     String   @id @default(cuid())
  userId                 String
  thisProposalId         String
  thatProposalId         String
  thisProposalPercentage Float
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  user                   User     @relation(fields: [userId], references: [id])
}

model GenieDAOFeedback {
  id         String   @id @default(cuid())
  userId     String
  genieDAOId String
  rating     Float
  comment    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  genieDAO   GenieDAO @relation(fields: [genieDAOId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model Agent {
  id                            String             @id @default(uuid())
  publicId                      String             @unique @default(uuid())
  name                          String
  userId                        String?
  User                          User?              @relation(fields: [userId], references: [id])
  description                   String?
  createdAt                     DateTime           @default(now())
  temperature                   Float              @default(0.7)
  noOfDocumentsToRetrieve       Int?               @default(4)
  noOfChatHistoryInContext      Int?               @default(15)
  semanticSearchSimilarityScore String?            @default("none")
  model                         String             @default("gpt-3.5-turbo")
  provider                      String             @default("openai")
  embedding                     String             @default("openai")
  streaming                     Boolean            @default(false)
  showRef                       Boolean            @default(false)
  questionGeneratorPrompt       String             @default("Given the following conversation and a follow up question, rephrase the follow up question to be a standalone question.   Chat History: {chat_history} Follow Up Input: {question} Standalone question:")
  qaPrompt                      String             @default("You are a helpful AI assistant. Use the following pieces of context to answer the question at the end. If you don't know the answer, just say you don't know. DO NOT try to make up an answer. If the question is not related to the context, politely respond that you are tuned to only answer questions that are related to the context.  {context}  Question: {question} Helpful answer in markdown:")
  voiceToTextType               String             @default("web_api")
  textToVoiceEnabled            Boolean            @default(false)
  textToVoiceType               String             @default("web_api")
  textToVoiceTypeMetadata       Json               @default("{}") @db.Json
  useHybridSearch               Boolean            @default(false)
  haveDataSourcesBeenAdded      Boolean            @default(false)
  useRag                        Boolean            @default(false)
  agentProtect                  Boolean            @default(false)
  agentApiKey                   String?
  agentModelApiKey              String?
  options                       Json?              @default("{}") @db.Json
  AgentAppearances              AgentAppearance[]
  AgentDocuments                AgentDocument[]
  AgentIntegrations             AgentIntegration[]
  AgentPlaygrounds              AgentPlayground[]
  AgentSources                  AgentSource[]
}

model AgentSource {
  id             String          @id @default(uuid())
  agentId        String
  type           String          @default("website")
  content        String?
  location       String?
  isPending      Boolean         @default(true)
  status         String          @default("pending")
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  options        Json?           @db.Json
  AgentDocuments AgentDocument[]
  Agent          Agent           @relation(fields: [agentId], references: [id])
}

model AgentDocument {
  id          String                @id @default(uuid())
  sourceId    String
  agentId     String
  content     String
  embedding   Unsupported("vector")
  metadata    Json
  Agent       Agent                 @relation(fields: [agentId], references: [id])
  AgentSource AgentSource           @relation(fields: [sourceId], references: [id])
}

model GlobalSettings {
  id                           String   @id @default(uuid())
  noOfAgentsPerUser            Int      @default(10)
  allowUserToCreateAgents      Boolean  @default(true)
  allowUserToRegister          Boolean  @default(false)
  numberOfDocuments            Int      @default(10)
  legacyMode                   Boolean  @default(false)
  hidePlayground               Boolean  @default(false)
  defaultChunkSize             Int?     @default(1000)
  defaultChunkOverlap          Int?     @default(200)
  dynamicallyFetchOllamaModels Boolean? @default(false)
  hideDefaultModels            Boolean? @default(false)
  defaultChatModel             String   @default("gpt-3.5-turbo-dbase")
  defaultEmbeddingModel        String   @default("dialoqbase_eb_text-embedding-ada-002")
  ollamaURL                    String?  @default("http://host.docker.internal:11434")
}

model AgentIntegration {
  id                             String   @id @default(uuid())
  provider                       String
  agentId                        String
  identifier                     String
  telegramAgentToken             String?
  isPause                        Boolean? @default(false)
  discordAgentToken              String?
  discordSlashCommand            String?  @default("hey")
  discordSlashCommandDescription String?  @default("Use this command to get help")
  discordApplicationId           String?
  whatsappAccessToken            String?
  discordShowSources             Boolean? @default(false)
  discordSmartLabel              Boolean? @default(false)
  whatsappVerifyToken            String?
  whatsappPhoneNumber            String?
  slackAuthToken                 String?
  slackSigningSecret             String?
  slackAppToken                  String?
  Agent                          Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)
}

model AgentTelegramHistory {
  id         String   @id @default(uuid())
  chatId     Int?
  newChatId  String?
  identifier String?
  human      String?
  agent      String?
  createdAt  DateTime @default(now())
}

model AgentDiscordHistory {
  id         String   @id @default(uuid())
  chatId     String?
  identifier String?
  human      String?
  agent      String?
  createdAt  DateTime @default(now())
}

model AgentAppearance {
  id                   String  @id @default(uuid())
  agentId              String
  agentName            String
  firstMessage         String
  backgroundColor      String?
  chatAgentBubbleStyle Json?   @db.Json
  chatHumanBubbleStyle Json?   @db.Json
  tts                  Boolean @default(false)
  ttsVoice             String?
  ttsProvider          String?
  ttsModel             String?
  Agent                Agent   @relation(fields: [agentId], references: [id], onDelete: Cascade)
}

model AgentPlayground {
  id                      String                   @id @default(uuid())
  agentId                 String
  title                   String                   @default("New Chat")
  createdAt               DateTime                 @default(now())
  Agent                   Agent                    @relation(fields: [agentId], references: [id])
  AgentPlaygroundMessages AgentPlaygroundMessage[]
}

model AgentPlaygroundMessage {
  id                String          @id @default(uuid())
  agentPlaygroundId String
  type              String
  message           String
  isAgent           Boolean         @default(false)
  sources           Json?
  createdAt         DateTime        @default(now())
  AgentPlayground   AgentPlayground @relation(fields: [agentPlaygroundId], references: [id], onDelete: Cascade)
}

model AgentWhatsappHistory {
  id         String   @id @default(uuid())
  chatId     String?
  from       String?
  identifier String?
  agentId    String?
  human      String?
  agent      String?
  createdAt  DateTime @default(now())
}

model AgentWebHistory {
  id        String   @id @default(uuid())
  agentId   String
  chatId    String
  metadata  Json?
  sources   Json?
  human     String?
  agent     String?
  createdAt DateTime @default(now())
}

model AiModels {
  id              String   @id @default(uuid())
  name            String?
  modelId         String   @unique
  modelType       String   @default("chat")
  streamAvailable Boolean  @default(false)
  modelProvider   String?
  localModel      Boolean  @default(false)
  config          Json     @default("{}") @db.Json
  hide            Boolean  @default(false)
  deleted         Boolean  @default(false)
  createdAt       DateTime @default(now())
}

model AgentApiHistory {
  id        String    @id @default(uuid())
  apiKey    String
  agentId   String?
  human     String?
  agent     String?
  createdAt DateTime? @default(now())
}

model UserApiKey {
  id        String   @id @default(uuid())
  name      String
  apiKey    String
  userId    String
  User      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}
