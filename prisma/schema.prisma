generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
  extensions      = [vector(schema: "public")]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String
  provider          String
  providerAccountId String   @map("provider_account_id")
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                   String    @id @default(cuid())
  address              String?
  badges               Json?
  banned               Boolean?
  bio                  String?   @db.Text // User's bio or description
  birthday             DateTime?
  blog                 String?
  city                 String?
  company              String?
  contributorsEnabled  Boolean?
  countryCode          String?
  createdAt            DateTime  @default(now())
  createdAtTwitter     DateTime?
  deletedAt            DateTime?
  email                String?   @unique
  emailVerified        DateTime?
  favouritesCount      Int?
  firstName            String?
  followersCount       Int? // Number of followers
  followingCount       Int? // Number of accounts the user is following
  gdprConsent          Boolean   @default(false)
  gender               String?
  geoEnabled           Boolean?
  githubUsername       String?
  hireable             Boolean?
  image                String?
  ipAddress            String?   @db.VarChar(45)
  language             String?
  lastName             String?
  lastSignInAt         BigInt?
  likeCount            Int? // Number of likes
  listedCount          Int?
  location             String? // User's location as per their Twitter profile
  name                 String?
  newsletterSubscribed Boolean   @default(false)
  phoneNumber          String?
  points               Int?
  postalCode           String?
  privateMetadata      Json?
  profileBannerUrl     String?
  protected            Boolean?
  publicMetadata       Json?
  referrerUserId       String?
  signatureTimestamp   DateTime  @default(now())
  signedPetition       Boolean   @default(false)
  stateProvince        String?
  statusesCount        Int?
  timeZone             String?
  tweetCount           Int? // Number of tweets (including retweets)
  twitterHandle        String? // Twitter username/handle
  type                 String?
  unsafeMetadata       Json?
  updatedAt            DateTime  @updatedAt
  username             String    @unique @default(uuid())
  verified             Boolean?
  warPercentageDesired Float?
  warPercentageGuessed Float?
  web3Wallet           String?
  website              String?
  admin                Boolean?  @default(false)

  accounts                              Account[]
  sessions                              Session[]
  activities                            Activity[]
  wishingWells                          WishingWell[]
  educations                            Education[]
  positions                             Position[]
  userSkills                            UserSkill[]
  endorsements                          Endorsement[]
  userRecommendations                   Recommendation[]                      @relation("UserRecommendations")
  recommenderRecommendations            Recommendation[]                      @relation("RecommenderRecommendations")
  posts                                 Post[]
  likes                                 Like[]
  comments                              Comment[]
  initiatedFriendships                  Friendship[]                          @relation(name: "InitiatorFriendships")
  receivedFriendships                   Friendship[]                          @relation(name: "ReceiverFriendships")
  createdGenieDAOs                      GenieDAO[]                            @relation("CreatedGenieDAOs")
  joinedGenieDAOs                       GenieDAO[]                            @relation("JoinedGenieDAOs")
  createdWishFulfillmentProposals       WishFulfillmentProposal[]             @relation("CreatedProposals")
  createdProposalProgressReports        ProposalProgressReport[]
  proposalComparisons                   ProposalComparison[]
  wishingWellPairAllocations            WishingWellPairAllocation[]
  globalProblemPairAllocations          GlobalProblemPairAllocation[]
  globalProblems                        GlobalProblem[]
  globalSolutionPairAllocations         GlobalSolutionPairAllocation[]
  globalSolutions                       GlobalSolution[]
  globalProblemSolutionsPairAllocations GlobalProblemSolutionPairAllocation[]
  genieDAOFeedback                      GenieDAOFeedback[]
  agents                                Agent[]
  globalTasksCreated                    GlobalTask[]
  userTasks                             UserTask[]
  llms                                  LLM[]
  datasources                           Datasource[]
  tools                                 Tool[]
  workflows                             Workflow[]
  vectorDb                              VectorDb[]
  workflowConfigs                       WorkflowConfig[]
  apiKeys                               ApiKey[]
  chats                                 Chat[]
}

model Education {
  id           String    @id @default(cuid())
  user         User      @relation(fields: [userId], references: [id])
  userId       String
  school       String
  degree       String?
  fieldOfStudy String?
  startDate    DateTime
  endDate      DateTime?
}

model Position {
  id        String    @id @default(cuid())
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  title     String
  company   String
  startDate DateTime
  endDate   DateTime?
  isCurrent Boolean
}

model UserSkill {
  id           String        @id @default(cuid())
  user         User          @relation(fields: [userId], references: [id])
  userId       String
  skillId      String
  endorsements Endorsement[]
  skill        Skill         @relation(fields: [skillId], references: [id])

  @@unique([userId, skillId])
}

model Skill {
  id          String            @id @default(cuid())
  name        String            @unique
  globalTasks GlobalTaskSkill[]
  users       UserSkill[]
}

model Endorsement {
  id          String     @id @default(cuid())
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  userSkill   UserSkill? @relation(fields: [userSkillId], references: [id])
  userSkillId String?
}

model Recommendation {
  id            String @id @default(cuid())
  user          User   @relation(name: "UserRecommendations", fields: [userId], references: [id])
  userId        String
  recommenderId String
  recommender   User   @relation(name: "RecommenderRecommendations", fields: [recommenderId], references: [id])
  text          String
}

model Post {
  id        String    @id @default(cuid())
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  likes     Like[]
  comments  Comment[]
}

model Like {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  post   Post   @relation(fields: [postId], references: [id])
  postId String
}

model Comment {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Friendship {
  id        String   @id @default(cuid())
  user      User     @relation(name: "InitiatorFriendships", fields: [userId], references: [id])
  userId    String
  friendId  String
  friend    User     @relation(name: "ReceiverFriendships", fields: [friendId], references: [id])
  status    String   @default("pending")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Activity {
  id           String        @id @default(cuid())
  userId       String
  name         String
  description  String?
  colorCode    String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  user         User          @relation(fields: [userId], references: [id])
  activityLogs ActivityLog[]
}

model ActivityLog {
  id         String   @id @default(cuid())
  activityId String
  date       DateTime @default(now())
  count      Int      @default(1)
  activity   Activity @relation(fields: [activityId], references: [id])
}

model GlobalProblem {
  id                                    String                                @id @default(cuid())
  userId                                String
  name                                  String                                @unique
  description                           String?                               @unique
  content                               String?
  featuredImage                         String?
  createdAt                             DateTime                              @default(now())
  updatedAt                             DateTime                              @updatedAt
  user                                  User                                  @relation(fields: [userId], references: [id])
  thisGlobalProblemAllocations          GlobalProblemPairAllocation[]         @relation("ThisGlobalProblemRelation")
  thatGlobalProblemAllocations          GlobalProblemPairAllocation[]         @relation("ThatGlobalProblemRelation")
  averageAllocation                     Float?
  globalProblemSolutions                GlobalProblemSolution[]               @relation("GlobalProblemToSolution")
  embedding                             Unsupported("vector(1536)")?
  globalProblemSolutionsPairAllocations GlobalProblemSolutionPairAllocation[]
}

model GlobalProblemPairAllocation {
  id                          String        @id @default(cuid())
  userId                      String
  thisGlobalProblemId         String
  thatGlobalProblemId         String
  thisGlobalProblemPercentage Float
  createdAt                   DateTime      @default(now())
  updatedAt                   DateTime      @updatedAt
  user                        User          @relation(fields: [userId], references: [id])
  thisGlobalProblem           GlobalProblem @relation("ThisGlobalProblemRelation", fields: [thisGlobalProblemId], references: [id])
  thatGlobalProblem           GlobalProblem @relation("ThatGlobalProblemRelation", fields: [thatGlobalProblemId], references: [id])

  @@unique([userId, thisGlobalProblemId, thatGlobalProblemId])
}

model GlobalSolution {
  id                            String                         @id @default(cuid())
  userId                        String
  name                          String                         @unique
  description                   String?                        @unique
  content                       String?
  featuredImage                 String?
  createdAt                     DateTime                       @default(now())
  updatedAt                     DateTime                       @updatedAt
  user                          User                           @relation(fields: [userId], references: [id])
  thisGlobalSolutionAllocations GlobalSolutionPairAllocation[] @relation("ThisGlobalSolutionRelation")
  thatGlobalSolutionAllocations GlobalSolutionPairAllocation[] @relation("ThatGlobalSolutionRelation")
  averageAllocation             Float?
  globalProblemSolutions        GlobalProblemSolution[]        @relation("GlobalSolutionToProblem")
  globalTaskSolutions           GlobalTaskSolution[]           @relation("GlobalSolutionToTask")
  embedding                     Unsupported("vector(1536)")?
}

model GlobalSolutionPairAllocation {
  id                           String         @id @default(cuid())
  userId                       String
  thisGlobalSolutionId         String
  thatGlobalSolutionId         String
  thisGlobalSolutionPercentage Float
  createdAt                    DateTime       @default(now())
  updatedAt                    DateTime       @updatedAt
  user                         User           @relation(fields: [userId], references: [id])
  thisGlobalSolution           GlobalSolution @relation("ThisGlobalSolutionRelation", fields: [thisGlobalSolutionId], references: [id])
  thatGlobalSolution           GlobalSolution @relation("ThatGlobalSolutionRelation", fields: [thatGlobalSolutionId], references: [id])

  @@unique([userId, thisGlobalSolutionId, thatGlobalSolutionId])
}

model GlobalProblemSolution {
  id                                   String                                @id @default(cuid())
  globalProblemId                      String
  globalSolutionId                     String
  name                                 String                                @unique
  description                          String?                               @unique
  content                              String?
  featuredImage                        String?
  averageAllocation                    Float?
  createdAt                            DateTime                              @default(now())
  updatedAt                            DateTime                              @updatedAt
  globalProblem                        GlobalProblem                         @relation("GlobalProblemToSolution", fields: [globalProblemId], references: [id])
  globalSolution                       GlobalSolution                        @relation("GlobalSolutionToProblem", fields: [globalSolutionId], references: [id])
  thisGlobalProblemSolutionAllocations GlobalProblemSolutionPairAllocation[] @relation("ThisGlobalProblemSolutionRelation")
  thatGlobalProblemSolutionAllocations GlobalProblemSolutionPairAllocation[] @relation("ThatGlobalProblemSolutionRelation")

  @@unique([globalProblemId, globalSolutionId])
}

model GlobalProblemSolutionPairAllocation {
  id                                  String                @id @default(cuid())
  userId                              String
  globalProblemId                     String?
  thisGlobalProblemSolutionId         String
  thatGlobalProblemSolutionId         String
  thisGlobalProblemSolutionPercentage Float
  createdAt                           DateTime              @default(now())
  updatedAt                           DateTime              @updatedAt
  user                                User                  @relation(fields: [userId], references: [id])
  globalProblem                       GlobalProblem?        @relation(fields: [globalProblemId], references: [id])
  thisGlobalProblemSolution           GlobalProblemSolution @relation("ThisGlobalProblemSolutionRelation", fields: [thisGlobalProblemSolutionId], references: [id])
  thatGlobalProblemSolution           GlobalProblemSolution @relation("ThatGlobalProblemSolutionRelation", fields: [thatGlobalProblemSolutionId], references: [id])

  @@unique([userId, thisGlobalProblemSolutionId, thatGlobalProblemSolutionId])
}

model GlobalTaskSolution {
  id               String         @id @default(cuid())
  globalTaskId     String
  globalSolutionId String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  globalTask       GlobalTask     @relation("GlobalTaskToSolution", fields: [globalTaskId], references: [id])
  globalSolution   GlobalSolution @relation("GlobalSolutionToTask", fields: [globalSolutionId], references: [id])

  @@unique([globalTaskId, globalSolutionId])
}

model GlobalTask {
  id                    String                       @id @default(cuid())
  userId                String
  name                  String                       @unique
  description           String?                      @unique
  content               String?
  featuredImage         String?
  createdAt             DateTime                     @default(now())
  updatedAt             DateTime                     @updatedAt
  skills                GlobalTaskSkill[]
  priority              String?
  status                TaskStatus                   @default(NOT_STARTED)
  dueDate               DateTime?
  budget                Float?
  comments              String[]
  creator               User                         @relation(fields: [userId], references: [id])
  globalTaskSolutions   GlobalTaskSolution[]         @relation("GlobalTaskToSolution")
  blockingTasks         GlobalTaskDependency[]       @relation("BlockingTask")
  dependentTasks        GlobalTaskDependency[]       @relation("DependentTask")
  globalTaskContextUrls GlobalTaskContextUrl[]
  userTasks             UserTask[]
  embedding             Unsupported("vector(1536)")?
}

model GlobalTaskSkill {
  id           String     @id @default(cuid())
  globalTaskId String
  skillId      String
  globalTask   GlobalTask @relation(fields: [globalTaskId], references: [id])
  skill        Skill      @relation(fields: [skillId], references: [id])

  @@unique([globalTaskId, skillId])
}

enum TaskStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

model GlobalTaskDependency {
  id              String     @id @default(cuid())
  blockingTaskId  String
  dependentTaskId String
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  blockingTask    GlobalTask @relation("BlockingTask", fields: [blockingTaskId], references: [id])
  dependentTask   GlobalTask @relation("DependentTask", fields: [dependentTaskId], references: [id])

  @@unique([blockingTaskId, dependentTaskId])
}

model GlobalTaskContextUrl {
  id          String       @id @default(cuid())
  url         String       @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  globalTasks GlobalTask[]
}

model UserTask {
  id             String       @id @default(cuid())
  userId         String
  globalTaskId   String
  role           UserTaskRole @default(ASSIGNEE)
  status         TaskStatus   @default(NOT_STARTED)
  startDate      DateTime?
  endDate        DateTime?
  estimatedHours Float?
  actualHours    Float?
  comments       String?
  assignedAt     DateTime     @default(now())
  user           User         @relation(fields: [userId], references: [id])
  globalTask     GlobalTask   @relation(fields: [globalTaskId], references: [id])

  @@unique([userId, globalTaskId])
}

enum UserTaskRole {
  ASSIGNEE
  REVIEWER
  COLLABORATOR
}

model WishingWell {
  id                         String                       @id @default(cuid())
  userId                     String
  name                       String                       @unique
  description                String?
  content                    String?
  images                     String[]
  featuredImage              String?
  createdAt                  DateTime                     @default(now())
  updatedAt                  DateTime                     @updatedAt
  user                       User                         @relation(fields: [userId], references: [id])
  wishingWellContributions   WishingWellContribution[]
  proposals                  WishFulfillmentProposal[]
  thisWishingWellAllocations WishingWellPairAllocation[]  @relation("ThisWishingWellRelation")
  thatWishingWellAllocations WishingWellPairAllocation[]  @relation("ThatWishingWellRelation")
  averageAllocation          Float?
  embedding                  Unsupported("vector(1536)")?
}

model WishingWellPairAllocation {
  id                        String      @id @default(cuid())
  userId                    String
  thisWishingWellId         String
  thatWishingWellId         String
  thisWishingWellPercentage Float
  createdAt                 DateTime    @default(now())
  updatedAt                 DateTime    @updatedAt
  user                      User        @relation(fields: [userId], references: [id])
  thisWishingWell           WishingWell @relation("ThisWishingWellRelation", fields: [thisWishingWellId], references: [id])
  thatWishingWell           WishingWell @relation("ThatWishingWellRelation", fields: [thatWishingWellId], references: [id])

  @@unique([userId, thisWishingWellId, thatWishingWellId])
}

model WishingWellContribution {
  id            String      @id @default(cuid())
  wishingWellId String
  date          DateTime    @default(now())
  count         Int         @default(1)
  wishingWell   WishingWell @relation(fields: [wishingWellId], references: [id])
}

model GenieDAO {
  id             String                       @id @default(cuid())
  name           String
  reputation     Float                        @default(0)
  createdAt      DateTime                     @default(now())
  updatedAt      DateTime                     @updatedAt
  creator        User                         @relation("CreatedGenieDAOs", fields: [creatorId], references: [id])
  creatorId      String
  members        User[]                       @relation("JoinedGenieDAOs")
  proposals      WishFulfillmentProposal[]
  collaborations WishFulfillmentProposal[]    @relation("ProposalCollaborators")
  feedback       GenieDAOFeedback[]
  embedding      Unsupported("vector(1536)")?
}

model WishFulfillmentProposal {
  id            String                   @id @default(cuid())
  wishingWellId String
  genieDAOId    String
  description   String
  leadIndicator String
  lagIndicator  String
  wishTokens    Int
  createdAt     DateTime                 @default(now())
  updatedAt     DateTime                 @updatedAt
  wishingWell   WishingWell              @relation(fields: [wishingWellId], references: [id])
  genieDAO      GenieDAO                 @relation(fields: [genieDAOId], references: [id])
  collaborators GenieDAO[]               @relation("ProposalCollaborators")
  reports       ProposalProgressReport[]
  creator       User                     @relation("CreatedProposals", fields: [creatorId], references: [id])
  creatorId     String
}

model ProposalProgressReport {
  id         String                  @id @default(cuid())
  proposalId String
  content    String
  createdAt  DateTime                @default(now())
  updatedAt  DateTime                @updatedAt
  proposal   WishFulfillmentProposal @relation(fields: [proposalId], references: [id])
  creator    User                    @relation(fields: [creatorId], references: [id])
  creatorId  String
}

model ProposalComparison {
  id                     String   @id @default(cuid())
  userId                 String
  thisProposalId         String
  thatProposalId         String
  thisProposalPercentage Float
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  user                   User     @relation(fields: [userId], references: [id])
}

model GenieDAOFeedback {
  id         String   @id @default(cuid())
  userId     String
  genieDAOId String
  rating     Float
  comment    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  genieDAO   GenieDAO @relation(fields: [genieDAOId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

enum AgentType {
  SUPERAGENT
  OPENAI_ASSISTANT
  LLM
}

enum LLMProvider {
  OPENAI
  AZURE_OPENAI
  HUGGINGFACE
  PERPLEXITY
  TOGETHER_AI
  ANTHROPIC
  BEDROCK
  GROQ
  MISTRAL
  COHERE_CHAT
}

enum LLMModel {
  GPT_3_5_TURBO
  GPT_3_5_TURBO_16K_0613
  GPT_3_5_TURBO_0613
  GPT_3_5_TURBO_1106
  GPT_3_5_TURBO_0125

  GPT_4
  GPT_4_0613
  GPT_4_32K
  GPT_4_32K_0613
  GPT_4_1106_PREVIEW
  GPT_4_0125_PREVIEW
  GPT_4_TURBO
  GPT_4_TURBO_PREVIEW
  GPT_4_TURBO_2024_04_09
  GPT_4_0
  MISTRAL_7B_INSTRUCT_V01
  MIXTRAL_8X7B_INSTRUCT_V01
}

enum ToolType {
  ALGOLIA
  BROWSER
  BING_SEARCH
  REPLICATE
  WOLFRAM_ALPHA
  ZAPIER_NLA
  AGENT
  OPENAPI
  CHATGPT_PLUGIN
  METAPHOR
  PUBMED
  CODE_EXECUTOR
  OPENBB
  GPT_VISION
  TTS_1
  HAND_OFF
  FUNCTION
  HTTP
  SUPERRAG
  RESEARCH
  GITHUB
  SCRAPER
  ADVANCED_SCRAPER
  GOOGLE_SEARCH
  SEC
}

enum DatasourceType {
  TXT
  PDF
  CSV
  PPTX
  XLSX
  DOCX
  GOOGLE_DOC
  YOUTUBE
  GITHUB_REPOSITORY
  MARKDOWN
  WEBPAGE
  AIRTABLE
  STRIPE
  NOTION
  SITEMAP
  URL
  FUNCTION
}

enum DatasourceStatus {
  IN_PROGRESS
  DONE
  FAILED
}

enum VectorDbProvider {
  PINECONE
  ASTRA_DB
  WEAVIATE
  QDRANT
  SUPABASE
}

model ApiKey {
  id            String   @id @default(uuid())
  name          String
  displayApiKey String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String
  user          User     @relation(fields: [userId], references: [id])

  @@index([userId], name: "api_user_id")
}

model Agent {
  id             String            @id @default(uuid())
  type           AgentType         @default(SUPERAGENT)
  name           String
  avatar         String?
  initialMessage String?           @db.Text()
  description    String            @default("Add a agent description...") @db.Text
  isActive       Boolean           @default(false)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  llms           AgentLLM[]
  llmModel       LLMModel?         @default(GPT_3_5_TURBO_16K_0613)
  prompt         String?
  userId         String
  user           User              @relation(fields: [userId], references: [id])
  datasources    AgentDatasource[]
  tools          AgentTool[]
  workflowSteps  WorkflowStep[]
  metadata       Json?
  outputSchema   String?
}

model Datasource {
  id          String            @id @default(uuid())
  name        String
  content     String?           @db.Text()
  description String?
  url         String?
  type        DatasourceType
  userId      String
  user        User              @relation(fields: [userId], references: [id])
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  metadata    String?           @db.Text
  status      DatasourceStatus  @default(IN_PROGRESS)
  datasources AgentDatasource[]
  vectorDb    VectorDb?         @relation(fields: [vectorDbId], references: [id])
  vectorDbId  String?
}

model AgentDatasource {
  agentId      String
  datasourceId String
  agent        Agent      @relation(fields: [agentId], references: [id], onDelete: Cascade)
  datasource   Datasource @relation(fields: [datasourceId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@id([agentId, datasourceId])
}

model Tool {
  id           String      @id @default(uuid())
  name         String
  description  String
  type         ToolType
  returnDirect Boolean     @default(false)
  metadata     String?     @db.Text
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  userId       String
  user         User        @relation(fields: [userId], references: [id])
  tools        AgentTool[]
  toolConfig   Json?
}

model AgentTool {
  agentId   String
  toolId    String
  agent     Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)
  tool      Tool     @relation(fields: [toolId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([agentId, toolId])
}

model LLM {
  id        String      @id @default(uuid())
  provider  LLMProvider @default(OPENAI)
  apiKey    String
  options   Json?
  agents    AgentLLM[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  userId    String
  user      User        @relation(fields: [userId], references: [id])
}

model AgentLLM {
  agentId   String
  llmId     String
  agent     Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)
  llm       LLM      @relation(fields: [llmId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([agentId, llmId])
}

model Workflow {
  id              String           @id @default(uuid())
  name            String
  description     String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  steps           WorkflowStep[]
  userId          String
  user            User             @relation(fields: [userId], references: [id])
  workflowConfigs WorkflowConfig[]
}

model WorkflowConfig {
  id         String   @id @default(uuid())
  config     Json
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  workflowId String
  workflow   Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  User       User?    @relation(fields: [userId], references: [id])
  userId     String?
}

model WorkflowStep {
  id         String   @id @default(uuid())
  order      Int
  workflowId String
  workflow   Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  input      String?  @db.Text
  output     String?  @db.Text
  agentId    String
  agent      Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)
}

model VectorDb {
  id          String           @id @default(uuid())
  provider    VectorDbProvider @default(PINECONE)
  options     Json
  datasources Datasource[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  userId      String
  user        User             @relation(fields: [userId], references: [id])
}

model GithubUser {
  id                    Int                    @id
  avatar_url            String
  bio                   String?
  blog                  String?
  created_at            String
  company               String?
  email                 String?
  events_url            String
  followers             Int
  followers_url         String
  following             Int
  following_url         String
  gists_url             String
  gravatar_id           String?
  hireable              Boolean?
  html_url              String
  location              String?
  login                 String
  name                  String?
  node_id               String
  organizations_url     String
  public_gists          Int
  public_repos          Int
  received_events_url   String
  repos_url             String
  site_admin            Boolean
  starred_url           String
  subscriptions_url     String
  twitter_username      String?
  type                  String
  url                   String
  updated_at            String
  generalDeveloperScore Float?
  githubIssuesCreated   GithubIssue[]
  githubRepos           GithubRepo[]
  repoDeveloperScores   RepoContributorScore[]
}

model GithubIssue {
  url            String
  repository_url String
  labels_url     String
  comments_url   String
  events_url     String
  html_url       String
  id             Int        @id
  node_id        String
  number         Int
  title          String
  creator        GithubUser @relation(fields: [githubUserId], references: [id])
  githubUserId   Int
}

model GithubRepo {
  id           Int        @id
  node_id      String
  name         String
  full_name    String
  private      Boolean
  owner        GithubUser @relation(fields: [githubUserId], references: [id])
  githubUserId Int
}

model RepoContributorScore {
  id                      Int        @id @default(autoincrement())
  githubUserId            Int
  repoOwner               String
  repoName                String
  score                   Float
  commitsCount            Int
  totalPullRequestsCount  Int
  mergedPullRequestsCount Int
  issuesCreatedCount      Int
  issueCommentsCount      Int
  commentReactionsScore   Float
  githubUser              GithubUser @relation(fields: [githubUserId], references: [id])

  @@unique([githubUserId, repoOwner, repoName])
}

model Library {
  id          String   @id @default(cuid())
  name        String
  version     String
  type        String
  description String?
  keywords    String[]
  author      String
  repository  String
  githubUrl   String?
  tags        String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Organization {
  id            String   @id @default(cuid())
  name          String
  alternateName String?
  description   String?
  url           String?
  logo          String?
  member        Person[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  email         String?
  telephone     String?
}

model Person {
  id             String       @id @default(cuid())
  name           String
  email          String?
  telephone      String?
  jobTitle       String?
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Chat {
  id        String        @id @default(uuid())
  title     String
  userId    String
  createdAt DateTime      @default(now())
  path      String
  messages  ChatMessage[]
  user      User          @relation(fields: [userId], references: [id])
}

enum MessageRole {
  system
  user
  assistant
  function
  data
  tool
}

model ChatMessage {
  id            String      @id @default(uuid())
  chat          Chat        @relation(fields: [chatId], references: [id])
  chatId        String
  tool_call_id  String?
  createdAt     DateTime    @default(now())
  content       String
  ui            String?
  role          MessageRole
  name          String?
  function_call String?
  data          Json?
  tool_calls    String?
  annotations   Json?
}
